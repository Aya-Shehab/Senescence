<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Bakery Admin Dashboard</title>
    <link rel="stylesheet" href="/css/admin.css" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-4Q6Gf2aSP4eDXB8Miphtr37CMZZQ5oXLH2yaXMJ2w8e2ZtHTl7GptT4jmndRuHDT"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/js/admin.js"></script>
    <script src="/js/inventory.js" defer></script>
    <script src="/js/feedback.js"></script>
    <script src="/js/customOrders.js" defer></script>
    <script src="/js/orders.js"></script>
  </head>
  <body>
    <div class="sidebar">
      <h2>Bakery Admin</h2>
      <a onclick="showSection('modern-dashboard')"
        ><i class="fas fa-tachometer-alt"></i> Dashboard Overview</a
      >
      <a onclick="showSection('account')"
        ><i class="fas fa-user-circle"></i> Account Management</a
      >
      <a onclick="showSection('inventory')"
        ><i class="fas fa-boxes"></i> Inventory</a
      >
      <a onclick="showSection('orders')"
        ><i class="fas fa-shopping-cart"></i> Order Management</a
      >
      <a onclick="showSection('requests')"
        ><i class="fas fa-gift"></i> Special Requests</a
      >
      <a onclick="showSection('users')"
        ><i class="fas fa-users"></i> User Management</a
      >
      <a onclick="showSection('sales')"
        ><i class="fas fa-chart-line"></i> Sales Analysis</a
      >
      <a onclick="showSection('feedback')"
        ><i class="fas fa-comment-dots"></i> Feedback & Reviews</a
      >
    </div>

    <div class="main">
      <div class="navbar">
        <h1>Dashboard Overview</h1>
        <span>Welcome, Admin!</span>
      </div>

      <div id="modern-dashboard" class="section active-section">
        <div class="card-container">
          <div class="card highlight-card">
            <h3>ðŸŽ‰ Best seller of the month</h3>
            <p id="bestSellerName">Loading...</p>
            <h2 style="color: #4e73df" id="bestSellerRevenue">$0</h2>
            <p id="bestSellerTarget">0% of target ðŸš€</p>
          </div>

          <div class="card highlight-card">
            <h3>Sales</h3>
            <p>Total Sales</p>
            <h2 style="color: #4e73df" id="totalSales">$0</h2>
            <p style="color: #28a745" id="salesGrowth">+0%</p>
          </div>

          <div class="card highlight-card">
            <h3>Orders</h3>
            <p>Total Orders</p>
            <h2 style="color: #4e73df" id="totalOrders">0</h2>
            <p style="color: #28a745" id="ordersGrowth"></p>
          </div>

          <div class="card highlight-card">
            <h3>Customer Orders</h3>
            <p>Order Value</p>
            <h2 style="color: #4e73df" id="customerOrdersValue">$0</h2>
            <p style="color: #28a745" id="customerOrdersGrowth">+0%</p>
          </div>

          <div class="card highlight-card">
            <h3>Profit</h3>
            <p>Net Profit</p>
            <h2 style="color: #4e73df" id="totalProfit">$0</h2>
         
          </div>
        </div>

        <div class="chart-container">
          <h3>Total Income (Yearly)</h3>
          <canvas id="incomeChart"></canvas>
        </div>
      </div>

      


      <div id="inventory" class="section">
        <div class="card-container">
          <div class="card highlight-card">
            <h3>Inventory Items</h3>
            <p id="totalItems">0</p>
          </div>
          <div class="card highlight-card">
            <button class="btn btn-primary" onclick="showAddProductForm()">
              <i class="bi bi-plus-circle"></i> Add New Product
            </button>
          </div>
        </div>

        <!-- Add/Edit Product Form -->
        <div id="productForm" class="chart-container" style="display: none;">
          <h3 id="formTitle">Add New Product</h3>
          <form id="inventoryForm" class="user-form">
            <input type="hidden" id="productId">
            <div class="row">
              <div class="col-md-6">
                <label for="name">Product Name:</label>
                <input type="text" id="name" name="name" required>

                <label for="category">Category:</label>
                <select id="category" name="category" required>
                  <option value="Cake">Cake</option>
                  <option value="Cookie">Cookie</option>
                  <option value="Croissant">Croissant</option>
                </select>

                <label for="imageUrl">Image URL:</label>
                <input type="text" id="imageUrl" name="imageUrl">

                <label for="pricePackWhole">Pack Price ($):</label>
                <input type="number" id="pricePackWhole" name="pricePackWhole" min="0" step="0.01" required>

                <label for="pricePiece">Piece Price ($):</label>
                <input type="number" id="pricePiece" name="pricePiece" min="0" step="0.01">
              </div>
              <div class="col-md-6">
                <label for="description">Description:</label>
                <textarea id="description" name="description"></textarea>

                <label for="ingredients">Ingredients (comma-separated):</label>
                <input type="text" id="ingredients" name="ingredients">

                <label for="inStock">In Stock:</label>
                <select id="inStock" name="inStock">
                  <option value="true">Yes</option>
                  <option value="false">No</option>
                </select>

                <label for="quantity">Quantity:</label>
                <input type="number" id="quantity" name="quantity" min="0" required>

                <label for="tags">Tags (comma-separated):</label>
                <input type="text" id="tags" name="tags">
              </div>
            </div>
            <div class="form-buttons">
              <button type="submit" class="btn btn-primary">Save</button>
              <button type="button" class="btn btn-secondary" onclick="hideProductForm()">Cancel</button>
            </div>
          </form>
        </div>

        <div class="chart-container">
          <h3>Inventory Status</h3>
          <div class="table-container">
            <table class="table">
              <thead>
                <tr>
                  <th>Product Name</th>
                  <th>Category</th>
                  <th>Photo</th>
                  <th>Pack Price ($)</th>
                  <th>Piece Price ($)</th>
                  <th>Description</th>
                  <th>Ingredients</th>
                  <th>In Stock</th>
                  <th>Quantity</th>
                  <th>Tags</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="inventory-tbody">
                <!-- Products will be loaded here dynamically -->
              </tbody>
            </table>
          </div>
        </div>
      </div>


      <div id="orders" class="section">
        <div class="card-container">
          <div class="card highlight-card">
            <h3>Order Management</h3>
            <div class="d-flex justify-content-between align-items-center">
              <div>
                <p>Total Orders: <span id="totalOrders">0</span></p>
                <p>Pending Orders: <span id="pendingOrders">0</span></p>
              </div>
            </div>
          </div>
        </div>
        <div class="chart-container">
          <h3>Order Management Status</h3>
          <div class="table-responsive">
            <table class="table table-striped table-hover">
              <thead>
                <tr>
                  <th>Order Number</th>
                  <th>Customer</th>
                  <th>Email</th>
                  <th>Phone</th>
                  <th>Address</th>
                  <th>Items</th>
                  <th>Total Price</th>
                  <th>Status</th>
                  <th>Payment</th>
                  <th>Date</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="orders-tbody">
                <!-- Orders will be dynamically inserted here -->
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <div id="requests" class="section">
        <div class="card-container">
          <div class="card highlight-card">
            <h3>Special Requests</h3>
            <p id="totalRequests">0</p>
            <button class="btn btn-primary" onclick="showAddRequestForm()">
              <i class="bi bi-plus-circle"></i> Add New Request
            </button>
          </div>
        </div>

        <!-- Add/Edit Request Form -->
        <div id="requestForm" class="chart-container" style="display: none;">
          <h3 id="formTitle">Add New Request</h3>
          <form id="customOrderForm" class="user-form">
            <input type="hidden" id="requestId">
            <div class="row">
              <div class="col-md-6">
                <label for="firstName">First Name:</label>
                <input type="text" id="firstName" name="firstName" required>

                <label for="lastName">Last Name:</label>
                <input type="text" id="lastName" name="lastName" required>

                <label for="email">Email:</label>
                <input type="email" id="email" name="email" required>

                <label for="phone">Phone:</label>
                <input type="text" id="phone" name="phone" required>

                <label for="address">Address:</label>
                <input type="text" id="address" name="address" required>
              </div>
              <div class="col-md-6">
                <label for="description">Description:</label>
                <textarea id="description" name="description" required></textarea>

                <label for="imageUrl">Image URL:</label>
                <input type="text" id="imageUrl" name="imageUrl">

                <label for="preferredDate">Preferred Date:</label>
                <input type="date" id="preferredDate" name="preferredDate">

                <label for="notes">Notes:</label>
                <textarea id="notes" name="notes"></textarea>

                <label for="status">Status:</label>
                <select id="status" name="status">
                  <option value="pending">Pending</option>
                  <option value="processing">Processing</option>
                  <option value="completed">Completed</option>
                  <option value="cancelled">Cancelled</option>
                </select>
              </div>
            </div>
            <div class="form-buttons">
              <button type="submit" class="btn btn-primary">Save</button>
              <button type="button" class="btn btn-secondary" onclick="hideRequestForm()">Cancel</button>
            </div>
          </form>
        </div>

        <div class="chart-container">
          <h3>Special Requests Status</h3>
          <div class="table-container">
            <table class="table table-striped table-hover">
              <thead>
                <tr>
                  <th>Customer Name</th>
                  <th>Contact Info</th>
                  <th>Order Details</th>
                  <th>Status</th>
                  <th>Created At</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="requests-tbody">
                <!-- Requests will be loaded here dynamically -->
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <div id="users" class="section">
        <div
          class="users-flex-container"
          style="display: flex; gap: 2rem; align-items: flex-start"
        >
          <div style="flex: 1">
            <input type="text" id="search" placeholder="Search users..." />
            <table class="user-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Email</th>
                  <th>Phone</th>
                  <th>Role</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="users-tbody">
                <% users.forEach(user => { %>
                <tr>
                  <td><%= user.name %></td>
                  <td><%= user.email %></td>
                  <td><%= user.phone || 'N/A' %></td>
                  <td><%= user.role %></td>
                  <td>
                    <span
                      class="status <%= user.isActive ? 'active' : 'inactive' %>"
                    >
                      <%= user.isActive ? 'Active' : 'Inactive' %>
                    </span>
                  </td>
                  <td>
                    <div class="dropdown">
                      <button
                        class="btn btn-secondary dropdown-toggle"
                        type="button"
                        data-bs-toggle="dropdown"
                        aria-expanded="false"
                      >
                        <i class="fas fa-ellipsis-v"></i>
                      </button>
                      <ul class="dropdown-menu">
                        <li>
                          <button
                            class="dropdown-item edit"
                            data-id="<%= user._id %>"
                          >
                            <i class="bi bi-pencil-square"></i> Edit
                          </button>
                        </li>
                        <li>
                          <button
                            class="dropdown-item toggle-status"
                            data-id="<%= user._id %>"
                          >
                            <i class="bi bi-toggle-on"></i> <%= user.isActive ?
                            'Deactivate' : 'Activate' %>
                          </button>
                        </li>
                        <li>
                          <button
                            class="dropdown-item delete text-danger delete-btn"
                            data-id="<%= user._id %>"
                          >
                            <i class="bi bi-trash"></i> Delete
                          </button>
                        </li>
                      </ul>
                    </div>
                  </td>
                </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
          <div style="flex: 1">
            <h3>Add/Edit User</h3>
            <form class="user-form">
              <label for="name">Name:</label>
              <input type="text" id="name" name="name" required />

              <label for="email">Email:</label>
              <input type="email" id="email" name="email" required />

              <label for="phone">Phone:</label>
              <input
                type="tel"
                id="phone"
                name="phone"
                pattern="^01[0125][0-9]{8}$"
              />

              <label for="role">Role:</label>
              <select id="role" name="role">
                <option value="customer">Customer</option>
                <option value="admin">Admin</option>
              </select>

              <label for="isActive">Status:</label>
              <select id="isActive" name="isActive">
                <option value="true">Active</option>
                <option value="false">Inactive</option>
              </select>

              <button type="submit">Save</button>
            </form>
          </div>
        </div>
      </div>

      <div id="sales" class="section">
        <div class="card-container" style="display: flex; gap: 2rem">
          <div class="card highlight-card" style="flex: 1">
            <h3>Best Seller Product</h3>
            <p id="bestSellerName">Loading...</p>
            <h2 style="color: #4e73df" id="bestSellerRevenue">$0</h2>
            <p id="bestSellerCount">0 sold this month</p>
          </div>
          <div class="card highlight-card" style="flex: 1">
            <h3>Top Customer</h3>
            <p id="topCustomerName">Loading...</p>
            <h2 style="color: #4e73df" id="topCustomerSpend">$0</h2>
            <p id="topCustomerOrders">0 orders this month</p>
          </div>
          <div class="card highlight-card" style="flex: 1">
            <h3>Highest Growth Category</h3>
            <p id="topCategoryName">Loading...</p>
            <h2 style="color: #4e73df" id="topCategoryGrowth">0%</h2>
            <p id="topCategorySales">0 sales this month</p>
          </div>
        </div>
        <div class="chart-container">
          <h3>Monthly Sales Analysis</h3>
          <canvas id="salesChart"></canvas>
        </div>
      </div>

      <div id="feedback" class="section">
       
        <div class="chart-container">
          <h3>Customer Feedback List</h3>
          <div class="table-responsive">
            <table class="table table-striped table-hover">
              <thead>
                <tr>
                  <th>User</th>
                  <th>Email</th>
                  <th>Message</th>
                  <th>Date</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="feedback-tbody">
                <!-- Feedback rows will be dynamically inserted here -->
              </tbody>
            </table>
          </div>
        </div>
      </div>


      <div id="account" class="section">
        <div class="card-container">
          <div class="card highlight-card">
            <h3>ðŸ‘¤ My Account</h3>
            <h2 style="color: #4e73df">Admin Profile</h2>
            <p>Account Status: Active</p>
            <button class="btn view-btn">Edit Profile</button>
          </div>

          <div class="card highlight-card">
            <div class="title">Last Login</div>
            <div class="amount">Today</div>
            <div class="change">9:30 AM</div>
          </div>
        </div>

        <div class="profile-container" style="display: flex; gap: 2rem">
          <div class="chart-container" style="flex: 1">
            <h3>Profile Information</h3>
            <form class="user-form" id="accountForm">
              <label for="adminName">Full Name:</label>
              <input type="text" id="adminName" value="John Admin" required />

              <label for="adminEmail">Email:</label>
              <input
                type="email"
                id="adminEmail"
                value="admin@bakery.com"
                required
              />

              <label for="adminPhone">Phone:</label>
              <input type="tel" id="adminPhone" value="+1 (555) 123-4567" />

              <label for="adminRole">Role:</label>
              <input
                type="text"
                id="adminRole"
                value="Store Manager"
                readonly
              />

              <button type="submit">Save Changes</button>
            </form>
          </div>
          <div class="chart-container" style="flex: 1">
            <h3>Change Password</h3>
            <form class="user-form" id="passwordForm">
              <label for="currentPass">Current Password:</label>
              <input type="password" id="currentPass" required />

              <label for="newPass">New Password:</label>
              <input type="password" id="newPass" minlength="8" />

              <label for="confirmPass">Confirm Password:</label>
              <input type="password" id="confirmPass" minlength="8" />

              <button type="submit">Update Password</button>
            </form>
          </div>
        </div>
      </div>

      <div id="products" class="section">
        <div class="card-container">
          <div class="card highlight-card"><h3>Product Management</h3></div>
        </div>
        <div class="chart-container">
          <h3>All Products</h3>
          <div class="table-container">
            <table>
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Category</th>
                  <th>Price (Whole)</th>
                  <th>Price (Piece)</th>
                  <th>Stock</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="products-tbody">
                <!-- Product rows will be inserted here -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
    
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-j1CDi7MgGQ12Z7Qab0qlWQ/Qqz24Gc6BM0thvEMVjHnfYGF0rmFCozFSxQBxwHKO"
      crossorigin="anonymous"
    ></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll(".delete-btn").forEach((btn) => {
          btn.addEventListener("click", async (e) => {
            e.preventDefault();
            const userId = btn.getAttribute("data-id");

            console.log(userId);

            if (confirm("Are you sure you want to delete this user?")) {
              try {
                const response = await fetch(`/api/v1/users/${userId}`, {
                  method: "DELETE",
                  headers: {
                    "Content-Type": "application/json",
                  },
                });

                if (response.ok) {
                  btn.closest("tr").remove();
                  alert("User deleted successfully");
                } else {
                  alert("Failed to delete user");
                }
              } catch (error) {
                console.error("Error deleting user:", error);
                alert("Error deleting user");
              }
            }
          });
        });
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        // Fetch dashboard overview data
        const fetchDashboardData = async () => {
          try {
            console.log('Fetching dashboard data...');
            const response = await fetch('/api/v1/admin/dashboard-overview');
            console.log('Response status:', response.status);
            
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('Dashboard data:', data);
            return data;
          } catch (error) {
            console.error('Error fetching dashboard data:', error);
            return null;
          }
        };

        // Update dashboard overview
        const updateDashboardOverview = (data) => {
          if (!data) {
            console.log('No data received');
            return;
          }

          console.log('Updating dashboard with data:', data);

          // Update Best Seller
          document.getElementById('bestSellerName').textContent = data.bestSeller.name;
          document.getElementById('bestSellerRevenue').textContent = `$${data.bestSeller.revenue.toFixed(2)}`;
          document.getElementById('bestSellerTarget').textContent = `${data.bestSeller.targetPercentage}% of target ðŸš€`;

          // Update Sales
          document.getElementById('totalSales').textContent = `$${data.sales.total.toFixed(2)}`;
          document.getElementById('salesGrowth').textContent = `+${data.sales.growth}%`;

          // Update Orders
          document.getElementById('totalOrders').textContent = data.orders.total;
          document.getElementById('ordersGrowth').textContent = `+${data.orders.growth}%`;

          // Update Customer Orders
          document.getElementById('customerOrdersValue').textContent = `$${data.customerOrders.value.toFixed(2)}`;
          document.getElementById('customerOrdersGrowth').textContent = `+${data.customerOrders.growth}%`;

          // Update Profit
          document.getElementById('totalProfit').textContent = `$${data.profit.total.toFixed(2)}`;

          // Update Profit Chart
          const profitChart = document.getElementById('profitChart');
          profitChart.innerHTML = data.profit.chart.data.map(height => 
            `<div class="bar" style="height: ${height}%"></div>`
          ).join('');

          const profitLabels = document.getElementById('profitLabels');
          profitLabels.innerHTML = data.profit.chart.labels.map(label => 
            `<span>${label}</span>`
          ).join('');

          // Update Yearly Income Chart
          const ctx = document.getElementById('incomeChart').getContext('2d');
          new Chart(ctx, {
            type: 'line',
            data: {
              labels: data.yearlyIncome.labels,
              datasets: [{
                label: 'Total Income',
                data: data.yearlyIncome.data,
                backgroundColor: 'rgba(78, 115, 223, 0.05)',
                borderColor: '#4e73df',
                borderWidth: 2,
                fill: true
              }]
            },
            options: {
              responsive: true,
              scales: {
                y: {
                  beginAtZero: true
                }
              }
            }
          });
        };

        // Initialize dashboard
        console.log('Initializing dashboard...');
        const dashboardData = await fetchDashboardData();
        updateDashboardOverview(dashboardData);

        // Refresh dashboard data every 5 minutes
        setInterval(async () => {
          console.log('Refreshing dashboard data...');
          const newData = await fetchDashboardData();
          updateDashboardOverview(newData);
        }, 300000);
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // Search functionality
        const searchInput = document.getElementById("search");
        const userTable = document.getElementById("users-tbody");
        
        searchInput.addEventListener("input", (e) => {
          const searchTerm = e.target.value.toLowerCase();
          const rows = userTable.getElementsByTagName("tr");
          
          Array.from(rows).forEach(row => {
            const name = row.cells[0].textContent.toLowerCase();
            const email = row.cells[1].textContent.toLowerCase();
            const phone = row.cells[2].textContent.toLowerCase();
            
            if (name.includes(searchTerm) || email.includes(searchTerm) || phone.includes(searchTerm)) {
              row.style.display = "";
            } else {
              row.style.display = "none";
            }
          });
        });

        // Edit functionality
        document.querySelectorAll(".edit").forEach(btn => {
          btn.addEventListener("click", async (e) => {
            e.preventDefault();
            const userId = btn.getAttribute("data-id");
            const row = btn.closest("tr");
            
            try {
              // Fetch user data from the server
              const response = await fetch(`/api/v1/users/${userId}`);
              if (!response.ok) {
                throw new Error('Failed to fetch user data');
              }
              const userData = await response.json();
              
              // Populate form with user data
              const form = document.querySelector(".user-form");
              form.setAttribute("data-user-id", userId);
              
              // Set form values
              document.getElementById("name").value = userData.name || '';
              document.getElementById("email").value = userData.email || '';
              document.getElementById("phone").value = userData.phone || '';
              
              // Set role value
              const roleSelect = document.getElementById("role");
              roleSelect.value = userData.role || 'customer';
              
              // Set isActive value
              const isActiveSelect = document.getElementById("isActive");
              isActiveSelect.value = userData.isActive ? "true" : "false";
              
              // Scroll to form
              form.scrollIntoView({ behavior: 'smooth' });
              
              // Add visual feedback
              form.classList.add('editing');
              
              // Change submit button text
              const submitBtn = form.querySelector('button[type="submit"]');
              if (submitBtn) {
                submitBtn.textContent = 'Update User';
              }
            } catch (error) {
              console.error('Error fetching user data:', error);
              alert('Failed to load user data. Please try again.');
            }
          });
        });

        // Toggle status functionality
        document.querySelectorAll(".toggle-status").forEach(btn => {
          btn.addEventListener("click", async (e) => {
            e.preventDefault();
            const userId = btn.getAttribute("data-id");
            const row = btn.closest("tr");
            const statusCell = row.cells[4].querySelector(".status");
            const currentStatus = statusCell.textContent.trim();
            const newStatus = currentStatus === "Active" ? "Inactive" : "Active";
            
            try {
              const response = await fetch(`/api/v1/users/${userId}/toggle-status`, {
                method: "PATCH",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ isActive: newStatus === "Active" }),
              });

              if (response.ok) {
                statusCell.textContent = newStatus;
                statusCell.className = `status ${newStatus.toLowerCase()}`;
                btn.innerHTML = `<i class="bi bi-toggle-on"></i> ${newStatus === "Active" ? "Deactivate" : "Activate"}`;
              } else {
                alert("Failed to update user status");
              }
            } catch (error) {
              console.error("Error updating user status:", error);
              alert("Error updating user status");
            }
          });
        });

        // Form submission for add/edit user
        const userForm = document.querySelector(".user-form");
        userForm.addEventListener("submit", async (e) => {
          e.preventDefault();
          const userId = userForm.getAttribute("data-user-id");
          
          // Get form values
          const name = document.getElementById("name").value;
          const email = document.getElementById("email").value;
          const phone = document.getElementById("phone").value;
          const role = document.getElementById("role").value;
          const isActive = document.getElementById("isActive").value === "true";

          const formData = {
            name,
            email,
            phone,
            role,
            isActive
          };

          console.log('Submitting form with data:', formData);
          console.log('User ID:', userId);

          try {
            const url = userId ? `/api/v1/users/${userId}` : "/api/v1/users";
            const method = userId ? "PUT" : "POST";
            
            console.log('Making request to:', url);
            console.log('Using method:', method);

            const response = await fetch(url, {
              method: method,
              headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
              },
              body: JSON.stringify(formData)
            });

            console.log('Response status:', response.status);
            
            const responseData = await response.json();
            console.log('Response data:', responseData);

            if (!response.ok) {
              throw new Error(responseData.error || 'Failed to save user');
            }

            alert(userId ? "User updated successfully" : "User added successfully");
            
            // Reset form
            userForm.reset();
            userForm.removeAttribute("data-user-id");
            userForm.classList.remove("editing");
            const submitBtn = userForm.querySelector('button[type="submit"]');
            if (submitBtn) {
              submitBtn.textContent = 'Save';
            }
            
            // Refresh the page to show updated data
            location.reload();
          } catch (error) {
            console.error("Error saving user:", error);
            alert(`Error saving user: ${error.message}`);
          }
        });

        // Add form validation
        userForm.addEventListener('input', (e) => {
          const nameInput = document.getElementById("name");
          const emailInput = document.getElementById("email");
          const phoneInput = document.getElementById("phone");
          
          // Basic validation
          nameInput.setCustomValidity(nameInput.value.trim() === '' ? 'Name is required' : '');
          emailInput.setCustomValidity(emailInput.value.trim() === '' ? 'Email is required' : '');
          
          // Phone validation (optional)
          if (phoneInput.value.trim() !== '') {
            const phoneRegex = /^01[0125][0-9]{8}$/;
            phoneInput.setCustomValidity(phoneRegex.test(phoneInput.value) ? '' : 'Invalid phone number format');
          } else {
            phoneInput.setCustomValidity('');
          }
        });

        // Prevent form submission if validation fails
        userForm.addEventListener('submit', (e) => {
          if (!userForm.checkValidity()) {
            e.preventDefault();
            e.stopPropagation();
            alert('Please fill in all required fields correctly');
          }
        });

        // Add loading state to form submission
        userForm.addEventListener('submit', async (e) => {
          const submitBtn = userForm.querySelector('button[type="submit"]');
          if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
          }
        });
      });
    </script>
    <style>
      .user-form.editing {
        border: 2px solid #4e73df;
        padding: 20px;
        border-radius: 5px;
        background-color: #f8f9fc;
      }
    </style>
    <script>
      // Load orders when the orders section is shown
      document.addEventListener('DOMContentLoaded', () => {
        const ordersTab = document.querySelector('[onclick="showSection(\'orders\')"]');
        if (ordersTab) {
          ordersTab.addEventListener('click', loadOrders);
        }
      });

      // Fetch orders from backend and display in the table
      async function loadOrders() {
        try {
          const response = await fetch('/api/v1/orders');
          if (!response.ok) {
            throw new Error('Failed to fetch orders');
          }
          const orders = await response.json();
          const tbody = document.getElementById('orders-tbody');
          tbody.innerHTML = '';

          // Update order counts
          document.getElementById('totalOrders').textContent = orders.length;
          document.getElementById('pendingOrders').textContent = 
            orders.filter(order => order.status === 'Pending').length;

          orders.forEach(order => {
            const shipping = order.shippingInfo || {};
            const address = shipping.address
              ? `${shipping.address.street}, ${shipping.address.city}, ${shipping.address.governorate}`
              : '-';
            const items = order.items && order.items.length
              ? order.items.map(item => `${item.name} (x${item.quantity})`).join('<br>')
              : '-';

            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${order.orderNumber}</td>
              <td>${shipping.firstName || ''} ${shipping.lastName || ''}</td>
              <td>${shipping.email || '-'}</td>
              <td>${shipping.phone || '-'}</td>
              <td>${address}</td>
              <td>${items}</td>
              <td>${order.totalPrice} ${order.currency || 'EGP'}</td>
              <td>
                <select class="form-select form-select-sm" onchange="updateOrderStatus('${order._id}', this.value)">
                  <option value="Pending" ${order.status === 'Pending' ? 'selected' : ''}>Pending</option>
                  <option value="Processing" ${order.status === 'Processing' ? 'selected' : ''}>Processing</option>
                  <option value="Delivered" ${order.status === 'Delivered' ? 'selected' : ''}>Delivered</option>
                  <option value="Cancelled" ${order.status === 'Cancelled' ? 'selected' : ''}>Cancelled</option>
                </select>
              </td>
              <td>${order.paymentMethod} (${order.paymentStatus})</td>
              <td>${new Date(order.createdAt).toLocaleString()}</td>
              <td>
                <button class="btn btn-danger btn-sm" onclick="deleteOrder('${order._id}')">
                  <i class="bi bi-trash"></i>
                </button>
              </td>
            `;
            tbody.appendChild(row);
          });
        } catch (error) {
          console.error('Error loading orders:', error);
          alert('Failed to load orders. Please try again.');
        }
      }

      // Update order status
      async function updateOrderStatus(orderId, newStatus) {
        try {
          const response = await fetch(`/api/v1/orders/status/${orderId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: newStatus })
          });

          if (!response.ok) {
            throw new Error('Failed to update order status');
          }

          await loadOrders(); // Refresh the orders list
          alert('Order status updated successfully');
        } catch (error) {
          console.error('Error updating order status:', error);
          alert('Failed to update order status');
        }
      }

      // Delete order
      async function deleteOrder(orderId) {
        if (!confirm('Are you sure you want to delete this order?')) {
          return;
        }

        try {
          const response = await fetch(`/api/v1/orders/${orderId}`, {
            method: 'DELETE'
          });

          if (!response.ok) {
            throw new Error('Failed to delete order');
          }

          await loadOrders(); // Refresh the orders list
          alert('Order deleted successfully');
        } catch (error) {
          console.error('Error deleting order:', error);
          alert('Failed to delete order');
        }
      }
    </script>
    <script>
      // Debug function to check if customOrders.js is loaded
      console.log('Custom Orders script loaded');
    </script>
    <script>
      // Load custom orders when the requests section is shown
      document.addEventListener('DOMContentLoaded', () => {
        const requestsTab = document.querySelector('[onclick="showSection(\'requests\')"]');
        if (requestsTab) {
          requestsTab.addEventListener('click', loadCustomOrders);
        }
      });

      // Fetch custom orders from backend and display in the table
      async function loadCustomOrders() {
        try {
          const response = await fetch('/api/v1/custom-orders');
          if (!response.ok) {
            throw new Error('Failed to fetch custom orders');
          }
          const orders = await response.json();
          const tbody = document.getElementById('requests-tbody');
          tbody.innerHTML = '';

          // Update total requests count
          document.getElementById('totalRequests').textContent = orders.length;

          orders.forEach(order => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>
                <strong>${order.firstName} ${order.lastName}</strong>
              </td>
              <td>
                <div><i class="bi bi-envelope"></i> ${order.email}</div>
                <div><i class="bi bi-telephone"></i> ${order.phone}</div>
                <div><i class="bi bi-geo-alt"></i> ${order.address}</div>
              </td>
              <td>
                <div class="order-details">
                  <div class="mb-2"><strong>Description:</strong> ${order.description}</div>
                  ${order.imageUrl ? `<div class="mb-2"><img src="${order.imageUrl}" alt="Order Image" style="max-width: 100px; border-radius: 4px;"></div>` : ''}
                  ${order.preferredDate ? `<div><strong>Preferred Date:</strong> ${new Date(order.preferredDate).toLocaleDateString()}</div>` : ''}
                  ${order.notes ? `<div class="mt-2"><strong>Notes:</strong> ${order.notes}</div>` : ''}
                </div>
              </td>
              <td>
                <select class="form-select form-select-sm" onchange="updateRequestStatus('${order._id}', this.value)">
                  <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>Pending</option>
                  <option value="processing" ${order.status === 'processing' ? 'selected' : ''}>Processing</option>
                  <option value="completed" ${order.status === 'completed' ? 'selected' : ''}>Completed</option>
                  <option value="cancelled" ${order.status === 'cancelled' ? 'selected' : ''}>Cancelled</option>
                </select>
              </td>
              <td>${new Date(order.createdAt).toLocaleString()}</td>
              <td>
                <button class="btn btn-primary btn-sm me-1" onclick="editRequest('${order._id}')">
                  <i class="bi bi-pencil-square"></i>
                </button>
                <button class="btn btn-danger btn-sm" onclick="deleteRequest('${order._id}')">
                  <i class="bi bi-trash"></i>
                </button>
              </td>
            `;
            tbody.appendChild(row);
          });
        } catch (error) {
          console.error('Error loading custom orders:', error);
          alert('Failed to load custom orders. Please try again.');
        }
      }

      // Update request status
      async function updateRequestStatus(requestId, newStatus) {
        try {
          const response = await fetch(`/api/v1/custom-orders/${requestId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: newStatus })
          });

          if (!response.ok) {
            throw new Error('Failed to update request status');
          }

          await loadCustomOrders(); // Refresh the requests list
          alert('Request status updated successfully');
        } catch (error) {
          console.error('Error updating request status:', error);
          alert('Failed to update request status');
        }
      }

      // Delete request
      async function deleteRequest(requestId) {
        if (!confirm('Are you sure you want to delete this request?')) {
          return;
        }

        try {
          const response = await fetch(`/api/v1/custom-orders/${requestId}`, {
            method: 'DELETE'
          });

          if (!response.ok) {
            throw new Error('Failed to delete request');
          }

          await loadCustomOrders(); // Refresh the requests list
          alert('Request deleted successfully');
        } catch (error) {
          console.error('Error deleting request:', error);
          alert('Failed to delete request');
        }
      }

      // Edit request
      function editRequest(requestId) {
        // Show the form and populate it with the request data
        showAddRequestForm();
        // Fetch and populate the form data
        fetch(`/api/v1/custom-orders/${requestId}`)
          .then(response => response.json())
          .then(data => {
            document.getElementById('requestId').value = data._id;
            document.getElementById('firstName').value = data.firstName;
            document.getElementById('lastName').value = data.lastName;
            document.getElementById('email').value = data.email;
            document.getElementById('phone').value = data.phone;
            document.getElementById('address').value = data.address;
            document.getElementById('description').value = data.description;
            document.getElementById('imageUrl').value = data.imageUrl || '';
            document.getElementById('preferredDate').value = data.preferredDate ? new Date(data.preferredDate).toISOString().split('T')[0] : '';
            document.getElementById('notes').value = data.notes || '';
            document.getElementById('status').value = data.status;
            document.getElementById('formTitle').textContent = 'Edit Request';
          })
          .catch(error => {
            console.error('Error fetching request data:', error);
            alert('Failed to load request data');
          });
      }
    </script>
    <style>
      .order-details {
        max-width: 400px;
        word-wrap: break-word;
      }
      .table td {
        vertical-align: middle;
      }
      .table img {
        max-height: 100px;
        object-fit: cover;
      }
    </style>
  </body>
</html>


